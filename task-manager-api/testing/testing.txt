* JEST Testing Framework *
---------------------------
intro:
------
1. what tools we have to use for testing
2. why testing is necessary >>> writing test cases to automatically verify that project is always working as expected

testing frameworks:
-------------------
1. jestjs.io
2. mochajs.org

jestjs.io
----------
-> we are going to use jest as testing framework for testing task-manager app
-> install jest as dev dependency inside task-manager app
  >>> npm i jest --save-dev

-> modify the scripts inside package.json
  >>> "test": "jest"
-> add this above line into the scripts

-> create a folder inside app for all the test cases
-> inside this create some files to write test cases

-> jest only looks up on the files ending with <filename>.test.js
-> after writing the cases run the command
  >>> "npm test"

snippet:
--------
test('hello world!', () => {

})

-> test() >>> global function that test suite provides us
-> test()
  -> this takes in a string that is the name of the test case
  -> 2nd is the code that runs to check something passes or not

why testing?
------------
-> saves time
-> creates reliable software
-> gives flexibility to developers
  - refactoring
  - collaborating
  - profiling
_____________________________________________________________________________________________________________________________________________________
* Writing Tests and Assertions *
----------------------------------
1.
-> an example was taken and written a test case on it.

example:
--------
-> created a "math.js" file inside "src" directory
-> that has a function calculateTip function which takes two args >>> total and tip percentage
snippet:
--------
const calculateTip = (bill, tipPercent) => {
  const total = bill * tipPercent
  return bill + total;
}
module.exports = {
  calculateTip
}
-> which calculates tip on given arguments
-> this need to be tested

test-script:
------------
const { calculateTip } = require("../src/math")
test('should calculate total with tip', () => {
  const checkTotal = calculateTip(10, 0.3)
  if (checkTotal !== 13) {
    throw new Error(`Total must be 13 but got ${checkTotal}`)
  }
})
-> if the condition has not passed we throw a new error


Assertions:
------------
-> in the above case there are only three lines of code to check a small code
-> but some codes need a several lines of test code so we have assertion library with Jest that has set of functions and methods we can use

-> we have to use "expect" library is used to replace the "if-condition" inside the above test case
  >>> expect(checkTotal).toBe(13)
-> this single line of code replaces if-condition inside the test-case

modified:
----------
const { calculateTip } = require("../src/math")
test('should calculate total with tip', () => {
  const checkTotal = calculateTip(10, 0.3)
  expect(checkTotal).toBe(13)
})

-> expect(checkTotal).toBe(13)
  -> we can read this line in simple english that >>> "expect checkTotal to be 13"
-> if checkTotal expected result is 13 then it does not return error but if it false it returns an error

Note:
------
1. read the docs inside "jestjs.io" to use several assertions >> there are lot of useful features available... but we use most basic one that is ".toBe()"

another test case with default arguments:
-----------------------------------------
snippet:
--------
const calculateTip = (bill, tipPercent = 0.2) => {
  const total = bill * tipPercent
  return bill + total;
}
module.exports = {
  calculateTip
}

test-suite:
-----------
test('should calculate total with default tip', () => {
  const checkTotal = calculateTip(10)
  expect(checkTotal).toBe(12)
})
_____________________________________________________________________________________________________________________________________________________
* Writing Own Test Cases *
---------------------------
1.
now we write our own test cases for temperature conversion functions

snippets:
---------
const fahrenheitToCelsius = (temp) => {
  
}