_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Event Acknowledgement:
----------------------
intro:
------

1. an event acknowledgement allows receiver of the event to acknowledge that it received and processed the event

// server(emit) -> client(receive) --acknowledgement -> server
// client(emit) -> server(receive) --acknowledgement -> client
    - server emits event to client and client acknowledges server that it received the event and started processing it
    - vice versa

-> the acknowledgement is the last argument that is a CB function of emit function
    - socket.emit('event-name', data, () => { "acknowledgement- The message was delivered" })
      - if this is emitted from client

                  same event that         acknowledgement function that has
                  has fired from          sent from client
                  client
                      /                        /
      - socket.on('event-name', (message, callback) => {
          io.emit('message', message)                                 --- server side code
          callback()
        })
ex:
---
server(index):
--------------
socket.on('sendMessage', (message, callback) => {
  io.emit('message', message)
  callback()
})

client(chat.js):
----------------
socket.emit('sendMessage', message, () => {
  console.log('Message delivered')
})

Conclusion:
-----------
1. whoever emitting event sets up a callback function... whoever is receiving the event calls the callback function


UseCase- acknowledgement
------------------------
1. adding validation for the data that has been sent across

- ex: if we do not want to allow messages that contain profane languages
  - there is an NPM module to integrate to avoid profane language (NPM: bad-words)

NPM: bad-words
--------------
-> as the document shows that... we can list our own bad words to exclude from the server

-> import the module
const Filter = require('bad-words')

-> initialize the Filter with 'F'
const filter = new Filter()

-> the profanity will be checked inside server(index.js) when messages from the client were sent(chat.js)
const filter = new Filter()
if (filter.isProfane()) {
  return callback('profanity is not allowed!')
}

-> chat.js (client-side) - handle the error
socket.emit('sendMessage', message, (error) => {
  if(error){
    return console.log(error)
  }
  console.log('Message delivered')
})

Challenge:
----------
setup acknowledgement:
-----
1. setup client acknowledgement
-----
client:
-----
  navigator.geolocation.getCurrentPosition((position) => {
    socket.emit('sendLocation', {
      latitude: position.coords.latitude,
      longitude: position.coords.longitude
    }, () => {
      console.log("location shared!")
    })
  })

2. setup server to send back the acknowledgement
3. have the client print "Location Shared!" when acknowledged
-----
server:
-----
  socket.on('sendLocation', (coords, callback) => {
    io.emit('message', `https://google.com/maps?q=${coords.longitude},${coords.latitude}`)
    callback()
  })
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Form and Button States:
-----------------------

-> modifying form inside HTML and the Form-Handling with chat.js code
-----

-> when ever we send a message the form is not clearing on it's own
-> sending the location is taking some time... so we have to disable all the buttons in this time period
    - so that user can not be able to send location another time until the 1st try has finished
-----

-> so we have to disable and enable the form after a message and location has been sent
    - it avoids the accidental double clicks

chat.js:
--------
Note:
-----
-> "$" as a prefix for every element is the element that is taken from the HTML document

// elements
const $messageForm = document.querySelector('#message-form')
const $messageFormInput = $messageForm.querySelector('input')
const $messageFormButton = $messageForm.querySelector('button')
const $sendLocationButton = document.querySelector('#send-location')

chat.js:
--------
-> chat.js for disabling and reenabling the buttons message form-button and send location-button

$messageForm.addEventListener('submit', (e) => {
  e.preventDefault()
  $messageFormButton.setAttribute('disabled', 'disabled')                 // Disable button
  const message = e.target.elements.message.value
  socket.emit('sendMessage', message, (error) => {
    $messageFormButton.removeAttribute('disabled')                        // enable the button again
    $messageFormInput.value = ''
    $messageFormInput.focus()
    if(error){
      return console.log(error)
    }
    console.log('Message delivered')
  })
})
$sendLocationButton.addEventListener('click', () => {                         // code to access user's location
  if (!navigator.geolocation) {
    return alert('Geo Location is not supported by your browser!')
  }
  $sendLocationButton.setAttribute('disabled', 'disabled')              // disable send-location button
  navigator.geolocation.getCurrentPosition((position) => {                    // fetch location
    socket.emit('sendLocation', {
      latitude: position.coords.latitude,
      longitude: position.coords.longitude
    }, () => {
      $sendLocationButton.removeAttribute('disabled')                   // enable the send-location button again
      console.log("location shared!")
    })
  })
})
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Rendering Messages:
-------------------

-> render the messages on the browser.... that were printing in the terminal till now
    - we will be using mustache template library... used to define HTML templates and render those template using js
    - this helps us to render dynamic content to the webpage from js

---
in index.HTML:
--------------
1. paste the below scripts at last of the body tag.
---
<script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/3.0.1/mustache.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.6.0/qs.min.js"></script>

---
2. create a template
---
-> create a template with script tag
<script id="message-template" type="text/html">
  <div>
    <p>this is a message</p>
  </div>
</script>

Note:
-----
-> type="text/html" >>> which tells the browser that we have HTML inside the template

---
3. to render the messages generated
---
-> we add the below div inside HTML
<div id="messages"></div>
    -> the messages will be rendered here with chat.js dynamically

---
in chat.js:
-----------
-> to render messages we use chat.js,
    - we use socket.on('message') --- event

-> 1st we grab the elements and templates that were created inside HTML using id-attached to every element and templates
// element
const $messages = document.querySelector('#messages')
// Targeted HTML of Templates
const messageTemplate = document.querySelector('#message-template').innerHTML

-> 2nd we need to render the templates

static template- rendering
---
socket.on('message', (data) => {
  const html = Mustache.render(messageTemplate)                   // used mustache library to render the template
  $messages.insertAdjacentHTML('beforeend', html)
})

Note:
-----
-> this will render content which is inside the template

---
What if we want to render the dynamic content?

-> we change the syntax as below
-----
// script tag inside HTML
---
<script id="message-template" type="text/html">
  <div>
    <p>{{ message }}</p>                                                    // this accepts the dynamic content
  </div>
</script>

// socket.on() inside chat.js
---
socket.on('message', (data) => {                                                          // this data will be rendered
  const html = Mustache.render(messageTemplate, {                     // data to render as the 2nd argv
    message: data                                                             // to render "data" that came with socket.on()
  })
  $messages.insertAdjacentHTML('beforeend', html)
})
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Rendering Location Messages:
----------------------------
-> we add link to the location instead as HTML text

Challenge-1:
------------ create a separate event for location sharing message
1. emit "locationMessage" event from server with the URL
2. listen for above event and print that URL to the console

index.js:
-------
-> emitted "sendLocation" event...
---
socket.on('sendLocation', (coords, callback) => {
  io.emit('location', `https://google.com/maps?q=${coords.longitude},${coords.latitude}`)
  callback()
})

chat.js:
--------
-> listened to the event
---
socket.on('location', (url) => {
  console.log(url)
  const html = Mustache.render(locationTemplate, {
    locationURL: url
  })
  $location.insertAdjacentHTML('beforeend', html)
})

index.html:
-----------
-> render the location on web page
----
<script id="location-template" type="text/html">
  <div>
    <p><a href="{{locationURL}}" target="_blank">My current location</a></p>          // render dynamic content with {{}}
  </div>
</script>
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Working with Time Stamps:
-------------------------
-> integrate time to the message when they sent... time will be attached to the messages when they have sent

1st
---
How to generate Time Stamps:
----------------------------
-> we have "Date()" constructor function
    - use "new" operator to instantiate the Date() object

ex: const now = new Date()

-> so "now" holds all the methods that Date() object has.
---
methods:
--------
-> now.getDate()... which returns today's date
-> now.getTime()... we get a big number (Time Stamp)

-> as we have to use a similar code for every-time we send a message to the client
    - so we use a function for this we create a separate function inside a NEW FILE and export it!
    - create a new folder "utils" inside "src" and inside it create a file "messages.js"

inside src/utils/messages.js:
-----------------------------
const generateMessage = (text) => {
  return {
    text: text,
    createdAt: new Date().getTime()                         // we use Date() object here to generate time
  }
}
module.exports = {
  generateMessage
}

server (index.js):
-----------------
-> import function from this file into any file where ever we want!
---
1st
    -> we use it inside server (index.js)
    -> we replace the message we send with this function "generateMessage"

// import the function "generateMessage" from "messages.js" file
---
const { generateMessage } = require('./utils/messages')

io.on('connection', (socket) => {
  console.log("New Websocket Connection!")
  socket.emit('message', generateMessage("Welcome!"))                                               // used here
  socket.broadcast.emit('message', generateMessage("A new user has joined the chat!"))              // used here
  socket.on('sendMessage', (message, callback) => {
    const filter = new Filter()
    if (filter.isProfane()) {
      callback('Profanity is not allowed!')
    }
    io.emit('message', generateMessage(message))                                  // used here
    callback()
  })
  socket.on('sendLocation', (coords, callback) => {
    io.emit('location', `https://google.com/maps?q=${coords.longitude},${coords.latitude}`)
    callback()
  })
  socket.on('disconnect', () => {
    io.emit('message', generateMessage("A user has left the chat!"))                                // used here
  })
})

and
change the event that we are listening inside "chat.js" file:
---
socket.on('message', (data) => {
  // console.log(data)
  const html = Mustache.render(messageTemplate, {
    message: data.text                                                 // we access the "text" from
  })
  $messages.insertAdjacentHTML('beforeend', html)
})

---
2nd
-> add "createdAt" to the template we render where the message is rendering

index.html:
------------
-> rendering the time with "createdAt" with "message"
---
<script id="message-template" type="text/html">
  <div>
    <p>{{createdAt}}- {{message}}</p>
  </div>
</script>

-> sending the data from "data" object inside event-listening
---
socket.on('message', (data) => {
  // console.log(data)
  const html = Mustache.render(messageTemplate, {
    message: data.text,
    createdAt: data.createdAt
  })
  $messages.insertAdjacentHTML('beforeend', html)
})

output:
-------
-> so the rendered data when ever a message is rendered
ex: 1720450851982- Welcome!

-> the number rendered is not useful for the clients

Note:
-----
-> JS gives you un-formatted time stamp

Moment Library:
---------------   To format the time stamp from Date() we get
-> so to format the date we get... we use "moment"- library
-> we have methods on it we use to format the un-formatted time stamp 