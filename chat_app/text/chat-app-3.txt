1. previously we have developed the UI for this app which includes a join page and nice CSS for chat room
2. when ever a person joins a chat room... they get routed to the path:
  - http://localhost:3000/chat.html?username=Harsha&room=India
    - this path includes username and room (details)

Note:
-> so this query string segments can be accessed with the JS.


1. How to access to the query string from browser or through inspecting the web page?
---
-> inspect the web page -> write the code: "location.search" -> gives the query string: "?username=Harsha&room=India"
-> so in order to parse this query string
  - we use the third library that was added into the HTML (via cdnjs)


2. Use chat.js to parse the query string
---
-> we use... Qs.parse(location.search, { ignoreQueryPrefix: true })
  - "ignoreQueryPrefix" which removes the "?" before the "?username=Harsha&room=India"

-> we get an object from the above line of code
  - Qs.parse(location.search, { ignoreQueryPrefix: true });
    - destructuring username, room from the result we get... const { username, room }
snpt:
----
const { username, room } = Qs.parse(location.search, { ignoreQueryPrefix: true });

-> send the username and room to the server through an event
  - socket.emit('join', { username, room });


3. listen to the "join" event that was sent from "chat.js" file
---
-> before listening to the "message" event... we set up an event to listen on "join" event that was sent from chat.js

socket.join()
---
-> this allows us to join a chat room and we pass the name of the room we try to join.
  - and this gives us the chance to emit events only to that specific room

Note:
-> till now we have sent events from server to client using: "socket.emit()", "io.emit()", "socket.broadcast.emit()"
                                                                |                 |                     |
                                                        sends an event            |             sends to every client
                                                      to specific client          |          expect the a specific client
                                                                            sends to every
                                                                          connected client
-> room events
                    to specific rom                               to specific room
                        |                                               |
                "io.to(room).emit()"              "socket.broadcast.to(room).emit()"
                    |                                  |
                  emits to                      emits to everyone
            everyone in that room           expect the specific client

-> the io.to().emit() and socket.broadcast.to().emit()
  - these are limiting to that specific chat room itself
______________________________________________________________________________________________________________________________________________________________________

Storing User: Part-1
--------------------
Intro:
-> we need to track which users are in which room with their respective usernames

steps:
---
-> create "users.js" inside "utils" directory
-> inside we create four functions:
    - addUser:        tracks a new user when he/she joins the room
    - removeUser:     stops tracking a user when he/she leaves the room
    - getUser:        fetch an existing user's data
    - getUsersInRoom:  get all user inside a specific room

-> addUser = ({ id, username, room }) => {}
  - remember that id will be get from the individual socket (with every single connection to the server a unique Id generated!)
    - id: socket.id (a unique id generated for every connection) 
  - username and room are received from the frontend

code snippet for:
---
chat_app/src/utils/users.js
---
/*
 * Note:
 * findIndex()  -> we get the position of the an array item
 * find()       -> returns the first element in the array that satisfies condition
 * filter()     -> returns an array of all elements that pass the test
*/

const users = [];

// --------------------------------------------------------------------------------- add user
const addUser = ({ id, username, room }) => {

  // Validate the data
  if (!username || !room) {
    return {
      error: "Username and room are required!",
    };
  }

  // Clean the data
  username = username.trim().toLowerCase();
  room = room.trim().toLowerCase();

  // Check for an existing user
  const existingUser = users.find((user) => {
    return user.room === room && user.username === username;
  });

  // Validate the existing user... if: return error
  if (existingUser) {
    return {
      error: "Username is in use!",
    };
  }

  // else: Store user
  const user = { id, username, room };
  users.push(user);
  return { user };
};


// --------------------------------------------------------------------------------- remove user
const removeUser = (id) => {

  // index: 0 or greater if there is a match & -1 if there is no match
  const index = users.findIndex((user) => {
    return user.id === id
  })
  if (index !== -1) {
    return users.splice(index, 1)[0]
  }
}

______________________________________________________________________________________________________________________________________________________________________

Storing User: Part-2
--------------------

// --------------------------------------------------------------------------------- get a user
const getUser = (id) => {
  return users.find((user) => {
    return user.id === id
  })
}


// --------------------------------------------------------------------------------- get all users in a room
const getUsersInRoom = (room) => {
  room = room.trim().toLowerCase()
  return users.filter((user) => user.room === room)
}

module.exports = {
  addUser,
  removeUser,
  getUser,
  getUsersInRoom
}
______________________________________________________________________________________________________________________________________________________________________

Tracking Users Leaving and Joining
----------------------------------
-> now import all the functions into "index.js (server)" that were created inside "chat.js"
  - // import user management functions 
  - const { addUser, removeUser, getUser, getUsersInRoom } = require('./utils/users')


1. Usage of addUser:
--------------------
-> we have to use addUser where a user joins a room (code inside index.js)
-> with addUser() function we get either an error or user property that was added

addUser({ id, username, room } : {
    id: any;
    username: any;
    room: any;
}) : 
{                           |
    error: string;          | - the data that addUser returns (either an error or a user)
    user?: undefined;       |
} | {
    user: 
    {
        id: any;
        username: any;
        room: any;
    };
    error?: undefined;
}
import addUser

example snippet:
---                                           
                                                  * an acknowledgement will be sent using a callback *
io.on('connection', (socket) => {                 /
  console.log("New Websocket Connection!")       /
                                                /
                                               | 
  socket.on('join', ({ username, room }, callback) => {
    
    const { error, user } = addUser({ id: socket.id, username: username, room: room })
                                                 |
    if (error) {                                  \
      return callback(error)                       \
    }                                             * unique id generated for every connection *
    socket.join(user.room)
  })
})


2. Usage of removeUser():
-------------------------
io.on('connection', (socket) => {
  console.log("New Websocket Connection!")
  socket.on('disconnect', () => {
    
    // we use removeUser function here
    const user = removeUser(socket.id)

    if (user) { 
      io.to(user.room).emit('message', generateMessage(`${user.username} has left the chat!`))
    }         |
  })           \
})              \
              * this message is for room specific *


error on client:
---
-> if there were insufficient details provided 
    or
      if a user has entered same username that already a user with same username already exists (in same room)

-> we handle the error on client side (/public/chat.js)

example snippet:
---
socket.emit('join', { username, room }, (err) => {
  if (err) {
    alert(err)                    - error will be alerted 
    location.href = '/'           - and redirected to the home / join page
  }
});
______________________________________________________________________________________________________________________________________________________________________

Sending messages to specific room
---------------------------------
-> in here we gonna use getUser(socket.id) to get the user --- (inside index.js (server))
-> we change the template for rendering usernames of people who sent the messages (both chat__messages and locations) --- (inside chat.html (to render messages))
-> change the template of the generateMessage() and generateLocationMessage() functions 
    - which they accept username as an argument and used inside HTML template

snippets
--------
index.js:
---
io.on('connection', (socket) => {
  socket.on('sendMessage', (message, callback) => {

    const user = getUser(socket.id);                          // --- we fetch the user and user details 
    // console.log(user)

    const filter = new Filter()
    if (filter.isProfane()) {
      callback('Profanity is not allowed!')
    }

    io.to(user.room).emit('message', generateMessage(user.username, message))       // --- use "user.room" to send messages to that specific room passed
    callback()
  })
})

chat.js:
---
socket.on('message', (data) => {
  // console.log(data)
  const html = Mustache.render(messageTemplate, {
    username: data.username,
    message: data.text,
    createdAt: moment(data.createdAt).format('h:mm a')
  })
  $messages.insertAdjacentHTML('beforeend', html)
})

messages.js:
---
const generateMessage = (username, text) => {
  return {
    username: username,
    text: text,
    createdAt: new Date().getTime()
  }
}

chat.html:
---
-> updated the autocomplete option to off

<form id="message-form" >
  <input name="message" type="text" placeholder="Type a message" required autocomplete="off">
  <button>Send</button>
</form>
______________________________________________________________________________________________________________________________________________________________________

Rendering User List 
-------------------
-> rendering users present in a room and room name on the top of the chat room side_bar 
    - (the list automatically updates when ever users join and leave the chat room)

-> we use getUsersInRoom() to get all the users in that room
-> we emit a new event from the server to client when users inside of a room changes


snippets
---

1. we have render room name and users list
    - this snippet is written inside the "join" and "disconnect" events (when the users join and leave / disconnect)
---
io.to(user.room).emit("roomData", {
  room: user.room,
  users: getUsersInRoom(user.room)
})


2. to render the above data we have inject a template and this template rendered inside HTML (chat.html)
---
<div id ="sidebar" class="chat__sidebar">

-> to render below template inside HTML of above div tag

<script id="sidebar_template" type="text/html">
  <h2 class="room-title">{{room}}</h2>
  <h3 class="list-title">Users</h3>
  <ul class="users">
    {{#users}}
      <li>{{username}}</li>
    {{/users}}
  </ul>
</script>

-> to render data inside template
-> as we get a users (an array of objects): [{}, {}, {}...] --- contains user details (id, username, room)
-> so in order to render inside a template... from the objects of an array use --- 

       {{#users}} {{/users}}
          |           |
      it is name of the array
          |           |
        opening     closing
    
  - every thing inside of {{#users}}...{{/users}} it happens for each element in that array

  {{#users}}
    <li>{{username}}</li>
  {{/users}}


3. we have to render this using "chat.js" --- client side JS file
---
-> select the template and div element using querySelector... 
    - document.querySelector('#sidebar_template').innerHTML
    - document.querySelector('#sidebar')

-> to render data dynamically...

socket.on("roomData", (data) => {
  const html = Mustache.render(sidebarTemplate, {         |
    room: data.room,                                      | - to render data inside template
    users: data.users                                     |
  })
  $sidebar.innerHTML = html                     | - to render const html = Mustache.render(sidebarTemplate)... inside innerHTML of sidebar div
})

