* Sending Emails *
------------------

> Exploring SendGrid:
-----------------------
intro:
-------
1. sending emails from node.js in this section we will be using sendGrids { visit: sendgrid.com }
-> (but there is an error occurred while registering to this website)
2. so we are using 'nodemailer' to send emails using nodejs

snippet:
--------
const nodemailer = require('nodemailer');

// dotenv configuration
require('dotenv').config()

// Create a transporter using your Gmail account
const transporter = nodemailer.createTransport({
  service: 'gmail',
  host: "smtp.gmail.com",
  port: 587,
  secure: false,
  auth: {
    user: process.env.USER_EMAIL,
    pass: process.env.GMAIL_APP_PASS,                                           // You might need to generate an app password
  },
});

const mailOptions = {
  from: {
    name: 'Testing-App',
    address: process.env.USER_EMAIL
  },
  to: "kasavardhan2001@gmail.com",                                              // use array of emails if there are more than one email to send
  subject: "Testing Application by Sending Emails using Nodemailer and Gmail",
  text: "Hello World!",
  // attachments: [
  //   {
  //     filename: 'test.pdf',
  //     path: path.join(__dirname, 'test.pdf'),
  //     contentType: 'application/pdf'
  //   },
  //   {
  //     filename: 'image.png',
  //     path: path.join(__dirname, 'image.png'),
  //     contentType: 'image/png'
  //   }
  // ]
}

const sendMail = async(transporter, mailOptions) => {
  try{
    await transporter.sendMail(mailOptions);
    console.log('email has been sent successfully!')
  }
  catch(err){
    console.log(err)
  }
}

// Immediately Invoked Function Expression (IIFE) to send the email
(async() => {
  await sendMail(transporter, mailOptions)
})();

explanation:
------------
// Create a transporter using your Gmail account
const transporter = nodemailer.createTransport({
  service: 'gmail',
  host: "smtp.gmail.com",
  port: 587,
  secure: false,
  auth: {
    user: process.env.USER_EMAIL,
    pass: process.env.GMAIL_APP_PASS,                                           // You might need to generate an app password
  },
});
-------------------------------------
-> service >>> 'gmail'-> This specifies that we are using Gmail as the email service provider.
-> host >>> "smtp.gmail.com" -> This is the hostname for Gmail's SMTP server.
-> port >>> 587 -> This is the port for the SMTP server. Port 587 is commonly used for TLS (Transport Layer Security).
-> secure >>> false -> This indicates that we are not using SSL (Secure Sockets Layer) directly.
                    -> If you set this to true, you would typically use port 465.
-> auth >>> { user, pass } -> This object contains the authentication details for the email account.
                            -> The user is the email address, and the pass is the password. These are retrieved from environment variables (process.env.USER_EMAIL and process.env.GMAIL_APP_PASS) for security reasons

// Immediately Invoked Function Expression (IIFE) to send the email
(async() => {
  await sendMail(transporter, mailOptions)
})();
------------------------------------
>>> (async () => { ... })() -> Defines and immediately invokes an asynchronous function.
>>> await sendMail(transporter, mailOptions) -> Calls the sendMail function with the transporter and mail options as arguments and waits for it to complete.
>>> By using an IIFE, the email is sent as soon as the script is run, without needing to call the sendMail function explicitly elsewhere in the code.

Important points:
-----------------
1. generate and use recipient's gmail address to generate app_password

Summary:
--------
-> Transporter: Configures the email sending service using Gmail.
-> sendMail function: Sends the email using the configured transporter.
-> IIFE: Immediately invokes the sendMail function to send the email when the script runs